import{_ as e,c as a,o as s,b0 as r}from"./chunks/framework.Ccoaxoqw.js";const n="/imx6ull-docs/assets/image-20251019195355167.DlUTWAKW.png",o="/imx6ull-docs/assets/image-20251019200102907.Cm1gfM8f.png",l="/imx6ull-docs/assets/image-20251019200403291.BLKJEOQ4.png",i="/imx6ull-docs/assets/image-20251019203214039.D-cmQoIP.png",p="/imx6ull-docs/assets/2200321-20211205135152523-1685377026.D7dN6Sbw.jpg",d="/imx6ull-docs/assets/2200321-20211205140141959-1352146943.OOgTKEib.jpg",g="/imx6ull-docs/assets/image-20251019210207413.GUED6xcV.png",c="/imx6ull-docs/assets/image-20251019204129680.Rzx23e1I.png",h="/imx6ull-docs/assets/image-20251019210441737.CRpVk9G0.png",m="/imx6ull-docs/assets/image-20251019211134266.wiRmYdiJ.png",u="/imx6ull-docs/assets/image-20251019211317130.tmyTDHVe.png",_="/imx6ull-docs/assets/image-20251019211958275.qK6SgaEL.png",b="/imx6ull-docs/assets/2200321-20211211171441168-1550032146.CMCl1lx7.jpg",P="/imx6ull-docs/assets/image-20251019212700349.DbvDMDNF.png",f="/imx6ull-docs/assets/image-20251019213007665.D5xpm3wL.png",x="/imx6ull-docs/assets/image-20251019213139483.IXcjdcRb.png",V="/imx6ull-docs/assets/image-20251019213225145.DX7LrzvC.png",M="/imx6ull-docs/assets/2200321-20211211214916161-1579207745.1zrvC0JB.jpg",k="/imx6ull-docs/assets/image-20251019213951948.DnlPOEnl.png",D=JSON.parse('{"title":"LV010-VMware网络模式","description":null,"frontmatter":{"title":"LV010-VMware网络模式","date":"2025-10-19T19:51:03.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/dev-env/vm/126b0ece32df2aa6ab307ec6","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-10-19T19:51:03.682Z","fulluuid":"6ab307ec6d5b4bf3957d1c18284fbd7a","useduuid":"6ab307ec6"}},"headers":[],"relativePath":"sdoc/dev-env/vm/126b0ece32df2aa6ab307ec6.md","filePath":"sdoc/01-开发环境/01-虚拟机/LV010-VMware网络模式.md","lastUpdated":1760873307000}'),w={name:"sdoc/dev-env/vm/126b0ece32df2aa6ab307ec6.md"};function A(N,t,T,q,I,y){return s(),a("div",null,[...t[0]||(t[0]=[r('<h1 id="lv010-vmware网络模式" tabindex="-1">LV010-VMware网络模式 <a class="header-anchor" href="#lv010-vmware网络模式" aria-label="Permalink to &quot;LV010-VMware网络模式&quot;">​</a></h1><h2 id="一、vmware-的网络模式" tabindex="-1">一、VMware 的网络模式 <a class="header-anchor" href="#一、vmware-的网络模式" aria-label="Permalink to &quot;一、VMware 的网络模式&quot;">​</a></h2><h3 id="_1-虚拟机三种网络模式" tabindex="-1">1. 虚拟机三种网络模式 <a class="header-anchor" href="#_1-虚拟机三种网络模式" aria-label="Permalink to &quot;1. 虚拟机三种网络模式&quot;">​</a></h3><p>我们安装完 Vmware，在安装 ubuntu 的时候会创建一个网络适配器，这里会有不同的网络模式：</p><img src="'+n+'" alt="image-20251019195355167" style="zoom:50%;"><p><strong>桥接模式（Bridged）</strong>：在桥接模式下，虚拟机会直接连接到物理网络，就像是网络中的另一台独立主机。这种模式下，虚拟机可以直接与外部网络中的其他设备通信，无需通过宿主机。虚拟机的网络配置（如 IP 地址、网关、DNS 等）需要与宿主机在同一网络段内。桥接模式适用于需要虚拟机直接参与网络通信的场景，但可能会受到 IP 地址资源限制的影响。</p><p><strong>NAT 模式（Network Address Translation）</strong>：NAT 模式允许虚拟机通过宿主机的网络接口访问外部网络。在这种模式下，虚拟机与外部网络之间的通信是通过宿主机进行网络地址转换的。虚拟机在这种模式下拥有独立的 IP 地址，但对外部网络来说，它们的数据包都是从宿主机的 IP 地址发送出去的。NAT 模式适合于 IP 资源紧张或者需要隔离虚拟机网络的环境。</p><p><strong>仅主机模式（Host-Only）</strong>：仅主机模式创建了一个与外部网络隔离的私有网络，只有宿主机和虚拟机之间可以相互通信。在这种模式下，虚拟机无法直接访问外部网络，但可以用于测试和开发环境，其中网络隔离是必需的。如果需要，可以通过宿主机的网络共享功能来提供虚拟机对外部网络的访问。</p><p>每种模式都有其特定的应用场景和配置方法。选择合适的网络模式可以帮助虚拟机更好地集成到网络环境中，满足不同的网络需求。在配置虚拟机网络时，应根据实际需求和网络环境来选择最合适的模式。</p><h3 id="_2-虚拟网络编辑器" tabindex="-1">2. 虚拟网络编辑器 <a class="header-anchor" href="#_2-虚拟网络编辑器" aria-label="Permalink to &quot;2. 虚拟网络编辑器&quot;">​</a></h3><p>还有一个虚拟网络编辑器：</p><img src="'+o+'" alt="image-20251019200102907" style="zoom:50%;"><p>打开后是这样的：</p><img src="'+l+'" alt="image-20251019200403291" style="zoom:63%;"><p>这里看有到 VMnet0（桥接模式）、VMnet1（仅主机模式）、VMnet8（NAT 模式），具体的我们后面再详细说。</p><h3 id="_3-上面两个什么关系" tabindex="-1">3. 上面两个什么关系？ <a class="header-anchor" href="#_3-上面两个什么关系" aria-label="Permalink to &quot;3. 上面两个什么关系？&quot;">​</a></h3><p>VMware 的“虚拟网络编辑器”里看到的 VMnet0、VMnet1、VMnet8，和给虚拟机设置时看到的“网络适配器”中的桥接、NAT、仅主机模式，它们之间的关系简单来说就是：<strong>“虚拟网络编辑器”里的 VMnet 定义了网络的整体环境和规则，而“网络适配器”中的模式选择，则是决定我们的虚拟机具体连接到哪个 VMnet 虚拟网络</strong>。</p><p><strong>虚拟网络编辑器</strong> 中的 <strong>VMnet</strong>：相当于 <strong>创建和配置</strong> 这些虚拟交换机（设置它们的网段、是否启用 DHCP 等）。就像物理交换机一样，每个 VMnet 虚拟网络（VMnet0, 1, 8, 其他自定义网络）都是一台独立的 <strong>虚拟交换机</strong>。</p><p><strong>虚拟机设置</strong> 中的 <strong>网络适配器模式</strong>：相当于决定把我们的虚拟机 <strong>连接到哪一台</strong> 预设好的虚拟交换机上。当我们为一台虚拟机选择“桥接模式”，就等于用一根 <strong>虚拟网线</strong>，将这台虚拟机的 <strong>虚拟网卡</strong>，插入了名为 <strong>VMnet0</strong> 的虚拟交换机上。同样，选择“NAT 模式”就是插入了 <strong>VMnet8</strong> 交换机；选择“仅主机模式”就是插入了 <strong>VMnet1</strong> 交换机。</p><ul><li><strong>不同“虚拟交换机”的特性和连接方式</strong>：</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">特性维度</th><th style="text-align:left;">🛠️ <strong>VMnet0 (桥接模式)</strong></th><th style="text-align:left;">🛠️ <strong>VMnet8 (NAT 模式)</strong></th><th style="text-align:left;">🛠️ <strong>VMnet1 (仅主机模式)</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><strong>对应模式</strong></td><td style="text-align:left;">桥接模式 (Bridged)</td><td style="text-align:left;">NAT 模式</td><td style="text-align:left;">仅主机模式 (Host-only)</td></tr><tr><td style="text-align:left;"><strong>虚拟设备</strong></td><td style="text-align:left;">虚拟交换机</td><td style="text-align:left;">虚拟 NAT 设备、虚拟 DHCP 服务器</td><td style="text-align:left;">虚拟交换机</td></tr><tr><td style="text-align:left;"><strong>网络连通性</strong></td><td style="text-align:left;">虚拟机直接接入外部网络，与主机所在局域网其他主机及互联网互通</td><td style="text-align:left;">虚拟机可通过主机网络访问互联网 ，但外部网络通常无法直接访问虚拟机（需特殊设置）</td><td style="text-align:left;">虚拟机与主机形成内部封闭网络 ，默认 <strong>不能</strong> 访问外部网络</td></tr><tr><td style="text-align:left;"><strong>主机通信</strong></td><td style="text-align:left;">通过主机物理网卡通信</td><td style="text-align:left;">通过主机的 VMnet8 虚拟网卡通信</td><td style="text-align:left;">通过主机的 VMnet1 虚拟网卡通信</td></tr><tr><td style="text-align:left;"><strong>IP 地址分配</strong></td><td style="text-align:left;">通常由外部网络 DHCP 服务器分配，或手动设置与主机网段相同的静态 IP</td><td style="text-align:left;">通常由 VMnet8 虚拟网络的 DHCP 服务器分配</td><td style="text-align:left;">通常由 VMnet1 虚拟网络的 DHCP 服务器分配</td></tr><tr><td style="text-align:left;"><strong>应用场景</strong></td><td style="text-align:left;">需要虚拟机在局域网中像独立主机一样被访问</td><td style="text-align:left;">虚拟机需要便捷访问外部网络，且无需在外部网络中可见</td><td style="text-align:left;">构建与外界隔离的封闭网络环境，用于安全测试或内部网络调试</td></tr></tbody></table><h3 id="_4-宿主机的网络环境" tabindex="-1">4. 宿主机的网络环境 <a class="header-anchor" href="#_4-宿主机的网络环境" aria-label="Permalink to &quot;4. 宿主机的网络环境&quot;">​</a></h3><p>VMware 安装完成后会在宿主机上生成两块虚拟网卡，这两块网卡与虚拟机管理的两个虚拟交换机相连。如图 1-2.1 所示。</p><p><img src="'+i+'" alt="image-20251019203214039"></p><p>如果将宿主机上的这两块虚拟网卡卸载了，可通过 VMware 的顶部【选项栏】→【编辑】→【虚拟网络编辑器】→【还原默认设置】，重新将虚拟网卡还原。</p><h2 id="二、三种网络模式" tabindex="-1">二、三种网络模式 <a class="header-anchor" href="#二、三种网络模式" aria-label="Permalink to &quot;二、三种网络模式&quot;">​</a></h2><h3 id="_1-vmnet0-桥接模式" tabindex="-1">1. VMnet0（桥接模式） <a class="header-anchor" href="#_1-vmnet0-桥接模式" aria-label="Permalink to &quot;1. VMnet0（桥接模式）&quot;">​</a></h3><h4 id="_1-1-桥接简介" tabindex="-1">1.1 桥接简介 <a class="header-anchor" href="#_1-1-桥接简介" aria-label="Permalink to &quot;1.1 桥接简介&quot;">​</a></h4><p>桥接模式是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下, 类似于把物理主机虚拟为一个交换机, 所有设置桥接模式的虚拟机都将连接到这个交换机的一个接口上；同样物理主机也插在这个交换机中, 所以桥接下的网卡与网卡都是交换模式的, 可以相互访问而不干扰。如下图所示：</p><p><img src="'+p+'" alt="img"></p><p>宿主机的某块能上网的网卡会被虚拟成一台交换机，逻辑上是这样的：</p><p><img src="'+d+'" alt="img"></p><p>（1）虚拟网桥会转发宿主机网卡接收到的广播和组播信息，以及目标为虚拟交换机网段的单播。所以，与虚拟交换机机连接的虚拟网卡（如: eth0、ens33 等〉能接收到路由器发出的 DHCP 信息及路由更新。</p><p>（2）桥接模式是通过虚拟网桥将主机上的网卡与虚拟交换机 VMnet0 连接在一起，虚拟机上的虚拟网卡都连接在虚拟交换机 VMnet0 上，所以桥接模式下，虚拟机 IP 必须与宿主机的 IP 在同一网段且子网掩码、网关与 DNS 也要与宿主机网卡的一致。</p><p>（3）如上图中所示，桥接模式的虚拟机会占用宿主机所在局域网内的 IP 地址资源。同时，如果宿主机所在局域网中做了 IP 地址管理，比如 IP 地址需要公司网络部门审批通过后才能使用，那么虚拟机的 IP 地址也会受此管理规则的约束。</p><p>（4）默认存在自动获取 ip 机制，只需要将虚拟机设置为 Bridged(桥接模式），虚拟机会自动获取新的 ip，保证 ip 地址与宿主机在同一个网段。</p><h4 id="_1-2-复制物理网络连接状态" tabindex="-1">1.2 复制物理网络连接状态？ <a class="header-anchor" href="#_1-2-复制物理网络连接状态" aria-label="Permalink to &quot;1.2 复制物理网络连接状态？&quot;">​</a></h4><p>当笔记本电脑在有线网络和无线网络之间切换时，或者从一个WiFi切换到另一个WiFi时，物理网络的连接状态（如网络可用性、网关变化等）会发生改变。开启复制物理网络连接状态选项后，VMware会<strong>监测宿主机物理网络连接状态的变化，并触发虚拟机网络适配器的刷新操作</strong>，相当于在宿主机网络切换时，让虚拟机也“跟着”重新识别一次网络环境。<strong>本质</strong>就是它是在<strong>链路层</strong> 模拟了一次网线拔插的过程，让虚拟机操作系统意识到“网络环境变了，需要重新协商和配置”。</p><p>再来看一下续订IP，它是指网卡从路由器的DHCP服务器获得IP地址的过程。 网卡通过DHCP对IP都有租定时间，等到了一定的时间，我们的电脑会自动续订IP，以方便继续使用。它是一个在操作系统网络层<strong>手动或自动执行的命令</strong>。无论是虚拟机还是物理机，当执行“续订IP”命令（如 Windows 中的 <code>ipconfig /renew</code>）时，系统会向DHCP服务器重新请求或确认一个IP地址租约。有两个<strong>触发条件</strong>：</p><ul><li><strong>手动触发</strong>：用户主动在命令行中执行命令。</li><li><strong>自动触发</strong>：系统检测到网络连接建立或恢复时，<strong>自动发起</strong>DHCP请求。这正是“复制物理网络连接状态”功能希望达到的效果——<strong>通过触发链路层变化，来诱导操作系统自动执行“续订IP”这个操作</strong>。</li></ul><p>总结一下就是：</p><ul><li><strong>“复制物理网络连接状态”是“因”</strong>：它通过VMware在后台自动制造一个网络重置事件。</li><li><strong>“自动续订IP”是“果”</strong>：虚拟机操作系统响应这个重置事件，自动执行IP续订流程。</li></ul><p><img src="'+g+'" alt="image-20251019210207413"></p><p>如果我们<strong>关闭</strong>了“复制物理网络连接状态”功能（对应上图中“否”的分支），当宿主机切换网络时，虚拟机的网络适配器不会收到重置信号，它可能仍然保持着旧的IP地址和网关配置，导致无法在新网络中通信。这时，你就需要<strong>手动</strong>进入虚拟机，运行 <code>ipconfig /renew</code> 或重启网络服务来恢复连接。</p><p>所以，这个选项的实用价值就在于，它把<strong>一个需要用户手动干预的步骤（手动续订IP），变成了一个由VMware自动完成的幕后过程</strong>，极大地提升了笔记本电脑用户使用桥接模式时的网络体验。当然，这个前提是我们使用了<strong>DHCP的方式来分配IP地址</strong>。</p><p>总的来说就是：</p><ul><li><p>不选择复制物理网络连接状态选项：如果采用DHCP的方式来分配IP地址，当电脑网络从有线或无线网络之间进行移动时，DHCP会重新分配IP地址，即虚拟机IP地址会发生变化。</p></li><li><p>选择复制物理网络连接状态选项：复制网络连接状态仅用于笔记本电脑在有线网络与无线网络之间切换时进行IP地址续订，虚拟机IP地址不变</p></li></ul><p>如果要虚拟机上网，勾不勾该选项，没什么区别。如果不勾的话，无线和有线切换，很有可能IP地址发生变化，需要重新查看。这个选项主要是为了<strong>方便笔记本电脑或其他移动设备</strong>在使用桥接网络时，能在更换网络后保持虚拟机的网络连接稳定性。</p><h4 id="_1-3-使用示例" tabindex="-1">1.3 使用示例 <a class="header-anchor" href="#_1-3-使用示例" aria-label="Permalink to &quot;1.3 使用示例&quot;">​</a></h4><h5 id="_1-3-1-桥接网卡" tabindex="-1">1.3.1 桥接网卡 <a class="header-anchor" href="#_1-3-1-桥接网卡" aria-label="Permalink to &quot;1.3.1 桥接网卡&quot;">​</a></h5><p>我们把 VMnet8 桥接到无线网卡：</p><img src="'+c+'" alt="image-20251019204129680" style="zoom:60%;"><h5 id="_1-3-2-添加网络适配器" tabindex="-1">1.3.2 添加网络适配器 <a class="header-anchor" href="#_1-3-2-添加网络适配器" aria-label="Permalink to &quot;1.3.2 添加网络适配器&quot;">​</a></h5><p>我们可以为虚拟机中的 ubuntu 添加一个网络适配器并配置为桥接模式：</p><img src="'+h+'" alt="image-20251019210441737" style="zoom:50%;"><h5 id="_1-3-3-启动虚拟机" tabindex="-1">1.3.3 启动虚拟机 <a class="header-anchor" href="#_1-3-3-启动虚拟机" aria-label="Permalink to &quot;1.3.3 启动虚拟机&quot;">​</a></h5><p>启动后我们就可以看一下windows联网的无线网卡的ip地址和ubuntu中桥接模式的网络适配器的ip，会发现他们会在一个网段。</p><p><img src="'+m+'" alt="image-20251019211134266"></p><p>我们可以在ubuntu中使用ens37这个网卡ping一下<code>www.baidu.com</code>：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ping</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ens37</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www.baidu.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+u+'" alt="image-20251019211317130"></p><p>这就说明可以正常联网。</p><h4 id="_1-4-小结" tabindex="-1">1.4 小结 <a class="header-anchor" href="#_1-4-小结" aria-label="Permalink to &quot;1.4 小结&quot;">​</a></h4><p>这种情况其实就类似下面的图中连接方式：</p><p><img src="'+_+'" alt="image-20251019211958275"></p><h3 id="_2-vmnet8-nat-模式" tabindex="-1">2. VMnet8 (NAT 模式) <a class="header-anchor" href="#_2-vmnet8-nat-模式" aria-label="Permalink to &quot;2.  VMnet8 (NAT 模式)&quot;">​</a></h3><h4 id="_2-1-nat模式简介" tabindex="-1">2.1 NAT模式简介 <a class="header-anchor" href="#_2-1-nat模式简介" aria-label="Permalink to &quot;2.1 NAT模式简介&quot;">​</a></h4><p>用桥接模式虚拟出来的虚拟机，像是宿主机所在局域网内的一台真实机器，它<strong>会占用真实的IP资源，并受此局域网络的管理规则约束</strong>。如果我们网络中的IP资源紧缺，或者是使用新的IP需要通过层层审批以满足管理规则，那么NAT模式就是更合适的选择，这种模式可以避免这些问题带来的困扰。</p><p>NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网，就是做个源NAT，把虚拟机的IP转换成宿主机的某块网 卡的IP，通过那个IP（相当于防火墙的外网口IP）上网。其网络结构如图：</p><p><img src="'+b+'" alt="img"></p><p>（1）在虚拟机连接Vmnet8虚拟交换机时，虚拟机会将虚拟NAT设备及虚拟DHCP服务器连接到Vmnet8虚拟交换机上。依靠虚拟的NAT设备及虚拟的DHCP设备，如果我们的宿主机已经联网了，那么我们的虚拟机也就可以联网。</p><p>（2）同时宿主机上的虚拟网卡VMwareNetwork Adapter VMnet8也会连接到Vmnet8虚拟交换机上，用于宿主机和虚拟机的通信。</p><p>（3）虚拟网卡VMwareNetwork Adapter VMnet8只是作为主机与虚拟机通信的接口，虚拟机并不是依靠虚拟网卡VMware Network Adapter VMnet8来联网的。如果禁用掉宿主机上的虚拟网卡VMwareNetwork Adapter VMnet8，虚拟机仍然是可以上网的，只是宿主无法再访问VMnet8网段下的虚拟机了（但虚拟机仍然可以访问宿主机）。</p><p>（4）使用NAT模式，就是让虚拟机借助NAT（网络地址转换功能），通过宿主机所在的网络来访问互联网。也就是说，使用NAT模式可以实现虚拟机访问互联网；但由于NAT服务协议对外部网络隐蔽内部网络，因此虚拟机可以通过NAT服务器访问宿主机所在局域网内的其他真实主机，但这些真实主机且不能反过来访问虚拟机。即宿主机、宿主机所在局域网内的其他主机以及互联网中的其他主机都<strong>不能通过NAT服务器</strong>访问虚拟机（宿主机可以通过虚拟网卡VMware Network Adapter VMnet8来访问虚拟机），但是虚拟机能通过NAT服务器访问宿主机、宿主机所在局域网的其他主机以及互联网中的其他主机。</p><p>（5）使用NAT模式最大的优势是接入互联网十分简单，你不需要进行其他的配置（BOOTPROTO选择为dhcp的情况下），只要宿主机能访问互联网，虚拟机就能访问互联网。</p><h4 id="_2-2-使用示例" tabindex="-1">2.2 使用示例 <a class="header-anchor" href="#_2-2-使用示例" aria-label="Permalink to &quot;2.2 使用示例&quot;">​</a></h4><h5 id="_2-2-1-nat模式" tabindex="-1">2.2.1 NAT模式 <a class="header-anchor" href="#_2-2-1-nat模式" aria-label="Permalink to &quot;2.2.1 NAT模式&quot;">​</a></h5><p>我们其实创建虚拟机的时候默认用的就是NAT模式，这里默认的网络适配器就是NAT模式的：</p><img src="'+P+'" alt="image-20251019212700349" style="zoom:50%;"><p>一开始我们直接就是这样实现虚拟机中的ubuntu联网的。可以看一下这个时候NAT设置和DHCP设置的参数：</p><p><img src="'+f+'" alt="image-20251019213007665"></p><h5 id="_2-2-2-启动虚拟机" tabindex="-1">2.2.2 启动虚拟机 <a class="header-anchor" href="#_2-2-2-启动虚拟机" aria-label="Permalink to &quot;2.2.2 启动虚拟机&quot;">​</a></h5><p>我们启动虚拟机看一下网卡：</p><img src="'+x+'" alt="image-20251019213139483" style="zoom:50%;"><p>这里的ens33就是我们使用NAT模式的网络适配器。</p><h4 id="_2-3-小结" tabindex="-1">2.3 小结 <a class="header-anchor" href="#_2-3-小结" aria-label="Permalink to &quot;2.3 小结&quot;">​</a></h4><p>NAT模式的原理图如下：</p><p><img src="'+V+'" alt="image-20251019213225145"></p><p>（1）与物理真机不在同一个网段，拥有独立的IP网段。</p><p>（2）<strong>拥有一个虚拟的路由器（NAT设备）可以让虚拟机连接到外网环境。</strong></p><p>（3）地址转换：当虚拟机想要访问互联网（例如访问一个网站）时，数据包会先发送到宿主机上的NAT设备。NAT设备会将数据包的<strong>源IP地址</strong>从虚拟机的<strong>私有IP</strong>（如 <code>192.168.1.10</code>）<strong>转换</strong>成您宿主机的<strong>公网/物理IP地址</strong>（如 <code>218.56.123.21</code>），然后才发送到外部网络。当外部服务器返回响应时，数据包是发回给宿主机的物理IP。NAT设备再根据之前记录的连接会话信息，将数据包的<strong>目标IP地址</strong>从宿主机的物理IP<strong>转换</strong>回虚拟机的私有IP，并转发给虚拟机。</p><h3 id="_3-vmnet1-仅主机模式" tabindex="-1">3. VMnet1（仅主机模式） <a class="header-anchor" href="#_3-vmnet1-仅主机模式" aria-label="Permalink to &quot;3. VMnet1（仅主机模式）&quot;">​</a></h3><h4 id="_3-1-仅主机模式简介" tabindex="-1">3.1 仅主机模式简介 <a class="header-anchor" href="#_3-1-仅主机模式简介" aria-label="Permalink to &quot;3.1 仅主机模式简介&quot;">​</a></h4><p>仅主机模式是指把宿主机上的VMnet1这块网卡和虚拟环境里的虚拟交换机连在一起了，它 们只要是同一个网段的IP就能通信。因为宿主机只是普通的PC，它的网卡收到数据包后是 不会再进行转发了，所以仅主机模式下，虚拟环境里的虚拟机是上不了互联网的。</p><p><img src="'+M+'" alt="img"></p><p>（1）Host-Only模式通过宿主机的虚拟网卡VMwareNetwork Adapter VMnet1来连接虚拟交换机VMnet1，从而达到宿主机与虚拟机通信的目的。但是虚拟机不能主动与宿主机通信（是单向连通的）。</p><p>（2）如果想要在Host-Only模式下联网，可以将能联网的主机网卡共享给VMware Network Adapter VMnet1，这样就可以实现虚拟机联网。</p><p>（3）如果仅仅想让虚拟机访问互联网，这种方式不推荐，也没有必要。NAT方式是最简单的，基本上不需要做什么操作，就能自动连接上。</p><h4 id="_3-2-使用示例" tabindex="-1">3.2 使用示例 <a class="header-anchor" href="#_3-2-使用示例" aria-label="Permalink to &quot;3.2 使用示例&quot;">​</a></h4><p>后来自己也没有这种模式的需求，就没有尝试了。</p><h4 id="_3-3-小结" tabindex="-1">3.3 小结 <a class="header-anchor" href="#_3-3-小结" aria-label="Permalink to &quot;3.3 小结&quot;">​</a></h4><p>再来看一下基本原理图：</p><p><img src="'+k+'" alt="image-20251019213951948"></p><blockquote><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/666987647" target="_blank" rel="noreferrer">(8 封私信) 终于有人把VMware虚拟机三种网络模式讲清楚了！ - 知乎</a></p><p><a href="https://cloud.tencent.com/developer/article/2433678" target="_blank" rel="noreferrer">一文带你快速了解 VMware 的三种网络模式-腾讯云开发者社区-腾讯云</a></p><p><a href="https://limaofu.github.io/t1/VMware%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.pdf" target="_blank" rel="noreferrer">VMware 的三种网络模式详解.pdf</a></p><p><a href="https://www.cnblogs.com/certainTao/p/15643455.html" target="_blank" rel="noreferrer">2.VMware 三种网络模式 - certainTao - 博客园</a></p><p><a href="https://blog.csdn.net/weixin_51559947/article/details/120529913" target="_blank" rel="noreferrer">VM桥接模式下 复制物理网络连接状态选项有什么作用？_虚拟机cestos 桥连 复制网络状态是干嘛的-CSDN博客</a></p></blockquote>',104)])])}const v=e(w,[["render",A]]);export{D as __pageData,v as default};
